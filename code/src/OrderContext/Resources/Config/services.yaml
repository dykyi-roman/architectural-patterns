parameters:

services:
    _defaults:
        autowire: true
        autoconfigure: true
        public: false
        bind:
            $indexName: 'orders_index'
            $elasticsearchHost: '%env(resolve:ELASTICSEARCH_HOST)%'
            $elasticsearchRetries: '%env(resolve:ELASTICSEARCH_RETRIES)%'

    OrderContext\:
        resource: '../../'
        exclude:
            - '../../Resources/'
            - '../../Presentation/Api/{Request,Response}/'
            - '../../Presentation/Web/{Request,Response}/'
            - '../../Presentation/Console/{Input,Output}/'
            - '../../Application/**/*Command.php'
            - '../../Application/**/*Query.php'
            - '../../Application/**/*Dto.php'
            - '../../Application/**/*Exception.php'
            - '../../DomainModel/{Dto,Event,Enum,Entity,Exception,ValueObject}/'
            - '../../**/Tests/'
        tags: [ 'controller.service_arguments' ]

    # Doctrine Types
    OrderContext\Infrastructure\Persistence\Doctrine\Type\OrderIdType:
        tags: ['doctrine.dbal.type']

    OrderContext\Infrastructure\Persistence\Doctrine\Type\CustomerIdType:
        tags: ['doctrine.dbal.type']

    OrderContext\Infrastructure\Persistence\Doctrine\Type\ProductIdType:
        tags: ['doctrine.dbal.type']

    OrderContext\Infrastructure\Persistence\Doctrine\Type\MoneyType:
        tags: ['doctrine.dbal.type']

    # Repositories
    OrderContext\DomainModel\Repository\OrderWriteModelRepositoryInterface:
        alias: OrderContext\Infrastructure\Persistence\Doctrine\Repository\DoctrineOrderRepository

    OrderContext\Infrastructure\Persistence\Doctrine\Repository\DoctrineOrderRepository:
        arguments:
            $entityManager: '@doctrine.orm.default_entity_manager'

    # Elasticsearch Factory
    OrderContext\Infrastructure\Persistence\Doctrine\Factory\ElasticsearchClientFactory:
        arguments:
            $logger: '@logger'

    # Elasticsearch Client
    Elastic\Elasticsearch\Client:
        factory: ['@OrderContext\Infrastructure\Persistence\Doctrine\Factory\ElasticsearchClientFactory', 'createClient']
                
    OrderContext\DomainModel\Repository\OrderReadModelRepositoryInterface:
        class: OrderContext\Infrastructure\Persistence\Doctrine\Repository\ElasticsearchOrderReadModelRepository
        arguments:
            $client: '@Elastic\Elasticsearch\Client'

    # EventHandlers
    OrderContext\Infrastructure\EventStore\EventHandler\OrderCreatedEventHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'event.bus' }

    OrderContext\Infrastructure\EventStore\EventHandler\OrderStatusChangedEventHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'event.bus' }

    # Registering command handlers in the message bus
    OrderContext\Application\UseCases\CreateOrder\Command\CreateOrderCommandHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'command.bus' }

    OrderContext\Application\UseCases\ChangeOrderStatus\Command\ChangeOrderStatusCommandHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'command.bus' }

    # Registering Request Handlers in the Message Bus
    OrderContext\Application\UseCases\GetOrder\Query\GetOrderQueryHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'query.bus' }

    OrderContext\Application\UseCases\GetOrdersList\Query\GetOrdersListQueryHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'query.bus' }

    OrderContext\Application\UseCases\GetOrderHistory\Query\GetOrderHistoryQueryHandler:
        tags:
            - { name: 'messenger.message_handler', bus: 'query.bus' }

    # Transaction Service
    OrderContext\Infrastructure\Transaction\TransactionServiceInterface:
        class: OrderContext\Infrastructure\Transaction\DoctrineTransactionService
        arguments:
            $connection: '@doctrine.dbal.default_connection'

    # Commands
    OrderContext\Presentation\Console\Command\ElasticsearchIndexInitCommand:
        arguments:
            $orderRepository: '@OrderContext\Infrastructure\Persistence\Doctrine\Repository\ElasticsearchOrderReadModelRepository'
            $logger: '@logger'
        tags:
            - { name: 'console.command' }
